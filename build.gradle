apply plugin: 'java'

group = "Nuget@"
 
 
ext {
    springVersion = '4.3.7.RELEASE'
    springSecurityVersion = '4.2.2.RELEASE'
// latest stable version
    camelversion='2.18.3'
//ext.camelversion='2.19.0-SNAPSHOT'
        slf4jLog4j12BindingVersion = '1.7.25'
    protonJVersion= '0.18.0'
}

allprojects {
  repositories {
    mavenCentral()
  }
  task printSolvedDepsTreeInJson {
      doLast {
          def jsonOutput = "["
          configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
              def addToJson
              addToJson = { resolvedDep ->
//                  println resolvedDep.children.size()
                  jsonOutput += "\n{"
                  jsonOutput += "\"groupId\":\"${resolvedDep.module.id.group}\"," +
                          "\"artifactId\":\"${resolvedDep.module.id.name}\"," +
                          "\"version\":\"${resolvedDep.module.id.version}\"," +
                          "\"file\":\"${resolvedDep.getModuleArtifacts()[0].file.getAbsolutePath().replace("\\","\\\\")}\""
                  jsonOutput += ",\"dependencies\":["
                  if (resolvedDep.children.size() > 0) {
                      resolvedDep.children.each {
                          childResolvedDep ->
//                              println(childResolvedDep.module.id.name)
//                          if (resolvedDep in childResolvedDep.getParents()
//                                  && childResolvedDep.getConfiguration() == 'compile') {
                              addToJson(childResolvedDep)

                              String[] params = new String [3]
                              println(childResolvedDep.getModuleArtifacts())
                              params[0] = "C:\\work\\git_mehmet\\nuget@\\ikvm\\ikvm-8.0.5449.0\\bin\\ikvmc.exe"
                              params[1] = "\"${childResolvedDep.getModuleArtifacts()[0].file.getAbsolutePath()}\""
                              params[2] = "-target:library"
//                              params[3] = "-target:library";

                              try
                              {
                                  Process p = java.lang.Runtime.getRuntime().exec(params)

                                  BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()))
                                  String line;
                                  while (( line = input.readLine()) != null)
                                      println(line)

                                  input.close()
                              }
                              catch (IOException e)
                              {
                                  println(" procccess not read"+e)
                              }
//                          }
                      }
                      if (jsonOutput[-1] == ',') {
                          jsonOutput = jsonOutput[0..-2]
                      }
                  }
                  jsonOutput += "]},"
              }
              addToJson(dep)
          }
          if (jsonOutput[-1] == ',') {
              jsonOutput = jsonOutput[0..-2]
          }
          jsonOutput += "]"
//          println jsonOutput
          def myFile = new File("deps.json")
          PrintWriter printWriter = new PrintWriter(myFile)
          printWriter.println(jsonOutput)
          printWriter.close()
      }
  }

//    task parseJson(type:Exec) {
//        doLast {
//
//            workingDir '.'
//
//            //on windows:
//            commandLine 'cmd', '/c', '.\\Test1\\ikvm\\ikvm-8.0.5449.0\\ikvmc.exe'
//
//            //on linux
//            // commandLine './stop.sh'
//
//            //store the output instead of printing to the console:
//            standardOutput = new ByteArrayOutputStream()
//
//            //extension method stopTomcat.output() can be used to obtain the output:
//            ext.output = {
//                return standardOutput.toString()
//            }
//
//            def jsonFile = file("deps.json")
//            def parsedJson = new groovy.json.JsonSlurper().parseText(jsonFile.text)
//
//
//            println parsedJson.each{
//
//			}
//        }
//    }
}

subprojects {

}
